// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_auth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_auth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_auth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_auth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_auth_2eproto;
namespace authentication {
class AuthenticateWeb;
struct AuthenticateWebDefaultTypeInternal;
extern AuthenticateWebDefaultTypeInternal _AuthenticateWeb_default_instance_;
class AuthenticateWebFail;
struct AuthenticateWebFailDefaultTypeInternal;
extern AuthenticateWebFailDefaultTypeInternal _AuthenticateWebFail_default_instance_;
class AuthenticateWebSuccess;
struct AuthenticateWebSuccessDefaultTypeInternal;
extern AuthenticateWebSuccessDefaultTypeInternal _AuthenticateWebSuccess_default_instance_;
class CreateAccountWeb;
struct CreateAccountWebDefaultTypeInternal;
extern CreateAccountWebDefaultTypeInternal _CreateAccountWeb_default_instance_;
class CreateAccountWebFail;
struct CreateAccountWebFailDefaultTypeInternal;
extern CreateAccountWebFailDefaultTypeInternal _CreateAccountWebFail_default_instance_;
class CreateAccountWebSuccess;
struct CreateAccountWebSuccessDefaultTypeInternal;
extern CreateAccountWebSuccessDefaultTypeInternal _CreateAccountWebSuccess_default_instance_;
}  // namespace authentication
PROTOBUF_NAMESPACE_OPEN
template<> ::authentication::AuthenticateWeb* Arena::CreateMaybeMessage<::authentication::AuthenticateWeb>(Arena*);
template<> ::authentication::AuthenticateWebFail* Arena::CreateMaybeMessage<::authentication::AuthenticateWebFail>(Arena*);
template<> ::authentication::AuthenticateWebSuccess* Arena::CreateMaybeMessage<::authentication::AuthenticateWebSuccess>(Arena*);
template<> ::authentication::CreateAccountWeb* Arena::CreateMaybeMessage<::authentication::CreateAccountWeb>(Arena*);
template<> ::authentication::CreateAccountWebFail* Arena::CreateMaybeMessage<::authentication::CreateAccountWebFail>(Arena*);
template<> ::authentication::CreateAccountWebSuccess* Arena::CreateMaybeMessage<::authentication::CreateAccountWebSuccess>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace authentication {

enum CreateAccountWebFail_Reason : int {
  CreateAccountWebFail_Reason_ACCOUNT_ALREADY_EXISTS = 0,
  CreateAccountWebFail_Reason_INVALID_PASSWORD = 1,
  CreateAccountWebFail_Reason_INTERNAL_SERVER_ERROR = 2
};
bool CreateAccountWebFail_Reason_IsValid(int value);
constexpr CreateAccountWebFail_Reason CreateAccountWebFail_Reason_Reason_MIN = CreateAccountWebFail_Reason_ACCOUNT_ALREADY_EXISTS;
constexpr CreateAccountWebFail_Reason CreateAccountWebFail_Reason_Reason_MAX = CreateAccountWebFail_Reason_INTERNAL_SERVER_ERROR;
constexpr int CreateAccountWebFail_Reason_Reason_ARRAYSIZE = CreateAccountWebFail_Reason_Reason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateAccountWebFail_Reason_descriptor();
template<typename T>
inline const std::string& CreateAccountWebFail_Reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateAccountWebFail_Reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateAccountWebFail_Reason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateAccountWebFail_Reason_descriptor(), enum_t_value);
}
inline bool CreateAccountWebFail_Reason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CreateAccountWebFail_Reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateAccountWebFail_Reason>(
    CreateAccountWebFail_Reason_descriptor(), name, value);
}
enum AuthenticateWebFail_Reason : int {
  AuthenticateWebFail_Reason_INVALID_CREDENTIALS = 0,
  AuthenticateWebFail_Reason_INTERNAL_SERVER_ERROR = 1
};
bool AuthenticateWebFail_Reason_IsValid(int value);
constexpr AuthenticateWebFail_Reason AuthenticateWebFail_Reason_Reason_MIN = AuthenticateWebFail_Reason_INVALID_CREDENTIALS;
constexpr AuthenticateWebFail_Reason AuthenticateWebFail_Reason_Reason_MAX = AuthenticateWebFail_Reason_INTERNAL_SERVER_ERROR;
constexpr int AuthenticateWebFail_Reason_Reason_ARRAYSIZE = AuthenticateWebFail_Reason_Reason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthenticateWebFail_Reason_descriptor();
template<typename T>
inline const std::string& AuthenticateWebFail_Reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AuthenticateWebFail_Reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AuthenticateWebFail_Reason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AuthenticateWebFail_Reason_descriptor(), enum_t_value);
}
inline bool AuthenticateWebFail_Reason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AuthenticateWebFail_Reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AuthenticateWebFail_Reason>(
    AuthenticateWebFail_Reason_descriptor(), name, value);
}
// ===================================================================

class CreateAccountWeb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:authentication.CreateAccountWeb) */ {
 public:
  inline CreateAccountWeb() : CreateAccountWeb(nullptr) {}
  ~CreateAccountWeb() override;
  explicit constexpr CreateAccountWeb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAccountWeb(const CreateAccountWeb& from);
  CreateAccountWeb(CreateAccountWeb&& from) noexcept
    : CreateAccountWeb() {
    *this = ::std::move(from);
  }

  inline CreateAccountWeb& operator=(const CreateAccountWeb& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountWeb& operator=(CreateAccountWeb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAccountWeb& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAccountWeb* internal_default_instance() {
    return reinterpret_cast<const CreateAccountWeb*>(
               &_CreateAccountWeb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateAccountWeb& a, CreateAccountWeb& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountWeb* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccountWeb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountWeb* New() const final {
    return new CreateAccountWeb();
  }

  CreateAccountWeb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountWeb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAccountWeb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateAccountWeb& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountWeb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "authentication.CreateAccountWeb";
  }
  protected:
  explicit CreateAccountWeb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kPlaintextPassFieldNumber = 3,
    kReqIdFieldNumber = 1,
  };
  // required string email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // optional string plaintextPass = 3;
  bool has_plaintextpass() const;
  private:
  bool _internal_has_plaintextpass() const;
  public:
  void clear_plaintextpass();
  const std::string& plaintextpass() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_plaintextpass(ArgT0&& arg0, ArgT... args);
  std::string* mutable_plaintextpass();
  PROTOBUF_MUST_USE_RESULT std::string* release_plaintextpass();
  void set_allocated_plaintextpass(std::string* plaintextpass);
  private:
  const std::string& _internal_plaintextpass() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_plaintextpass(const std::string& value);
  std::string* _internal_mutable_plaintextpass();
  public:

  // required int32 reqId = 1;
  bool has_reqid() const;
  private:
  bool _internal_has_reqid() const;
  public:
  void clear_reqid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqid() const;
  void set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqid() const;
  void _internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:authentication.CreateAccountWeb)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintextpass_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqid_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class CreateAccountWebSuccess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:authentication.CreateAccountWebSuccess) */ {
 public:
  inline CreateAccountWebSuccess() : CreateAccountWebSuccess(nullptr) {}
  ~CreateAccountWebSuccess() override;
  explicit constexpr CreateAccountWebSuccess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAccountWebSuccess(const CreateAccountWebSuccess& from);
  CreateAccountWebSuccess(CreateAccountWebSuccess&& from) noexcept
    : CreateAccountWebSuccess() {
    *this = ::std::move(from);
  }

  inline CreateAccountWebSuccess& operator=(const CreateAccountWebSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountWebSuccess& operator=(CreateAccountWebSuccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAccountWebSuccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAccountWebSuccess* internal_default_instance() {
    return reinterpret_cast<const CreateAccountWebSuccess*>(
               &_CreateAccountWebSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateAccountWebSuccess& a, CreateAccountWebSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountWebSuccess* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccountWebSuccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountWebSuccess* New() const final {
    return new CreateAccountWebSuccess();
  }

  CreateAccountWebSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountWebSuccess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAccountWebSuccess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateAccountWebSuccess& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountWebSuccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "authentication.CreateAccountWebSuccess";
  }
  protected:
  explicit CreateAccountWebSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // required int32 reqId = 1;
  bool has_reqid() const;
  private:
  bool _internal_has_reqid() const;
  public:
  void clear_reqid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqid() const;
  void set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqid() const;
  void _internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 userId = 2;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:authentication.CreateAccountWebSuccess)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqid_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class CreateAccountWebFail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:authentication.CreateAccountWebFail) */ {
 public:
  inline CreateAccountWebFail() : CreateAccountWebFail(nullptr) {}
  ~CreateAccountWebFail() override;
  explicit constexpr CreateAccountWebFail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAccountWebFail(const CreateAccountWebFail& from);
  CreateAccountWebFail(CreateAccountWebFail&& from) noexcept
    : CreateAccountWebFail() {
    *this = ::std::move(from);
  }

  inline CreateAccountWebFail& operator=(const CreateAccountWebFail& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountWebFail& operator=(CreateAccountWebFail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAccountWebFail& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAccountWebFail* internal_default_instance() {
    return reinterpret_cast<const CreateAccountWebFail*>(
               &_CreateAccountWebFail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateAccountWebFail& a, CreateAccountWebFail& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountWebFail* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccountWebFail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountWebFail* New() const final {
    return new CreateAccountWebFail();
  }

  CreateAccountWebFail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountWebFail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAccountWebFail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateAccountWebFail& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountWebFail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "authentication.CreateAccountWebFail";
  }
  protected:
  explicit CreateAccountWebFail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CreateAccountWebFail_Reason Reason;
  static constexpr Reason ACCOUNT_ALREADY_EXISTS =
    CreateAccountWebFail_Reason_ACCOUNT_ALREADY_EXISTS;
  static constexpr Reason INVALID_PASSWORD =
    CreateAccountWebFail_Reason_INVALID_PASSWORD;
  static constexpr Reason INTERNAL_SERVER_ERROR =
    CreateAccountWebFail_Reason_INTERNAL_SERVER_ERROR;
  static inline bool Reason_IsValid(int value) {
    return CreateAccountWebFail_Reason_IsValid(value);
  }
  static constexpr Reason Reason_MIN =
    CreateAccountWebFail_Reason_Reason_MIN;
  static constexpr Reason Reason_MAX =
    CreateAccountWebFail_Reason_Reason_MAX;
  static constexpr int Reason_ARRAYSIZE =
    CreateAccountWebFail_Reason_Reason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Reason_descriptor() {
    return CreateAccountWebFail_Reason_descriptor();
  }
  template<typename T>
  static inline const std::string& Reason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Reason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Reason_Name.");
    return CreateAccountWebFail_Reason_Name(enum_t_value);
  }
  static inline bool Reason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Reason* value) {
    return CreateAccountWebFail_Reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReqIdFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // required int32 reqId = 1;
  bool has_reqid() const;
  private:
  bool _internal_has_reqid() const;
  public:
  void clear_reqid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqid() const;
  void set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqid() const;
  void _internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .authentication.CreateAccountWebFail.Reason reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::authentication::CreateAccountWebFail_Reason reason() const;
  void set_reason(::authentication::CreateAccountWebFail_Reason value);
  private:
  ::authentication::CreateAccountWebFail_Reason _internal_reason() const;
  void _internal_set_reason(::authentication::CreateAccountWebFail_Reason value);
  public:

  // @@protoc_insertion_point(class_scope:authentication.CreateAccountWebFail)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqid_;
  int reason_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateWeb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:authentication.AuthenticateWeb) */ {
 public:
  inline AuthenticateWeb() : AuthenticateWeb(nullptr) {}
  ~AuthenticateWeb() override;
  explicit constexpr AuthenticateWeb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticateWeb(const AuthenticateWeb& from);
  AuthenticateWeb(AuthenticateWeb&& from) noexcept
    : AuthenticateWeb() {
    *this = ::std::move(from);
  }

  inline AuthenticateWeb& operator=(const AuthenticateWeb& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateWeb& operator=(AuthenticateWeb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticateWeb& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticateWeb* internal_default_instance() {
    return reinterpret_cast<const AuthenticateWeb*>(
               &_AuthenticateWeb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AuthenticateWeb& a, AuthenticateWeb& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateWeb* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateWeb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateWeb* New() const final {
    return new AuthenticateWeb();
  }

  AuthenticateWeb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateWeb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticateWeb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuthenticateWeb& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateWeb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "authentication.AuthenticateWeb";
  }
  protected:
  explicit AuthenticateWeb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kPlaintextPassFieldNumber = 3,
    kReqIdFieldNumber = 1,
  };
  // required string email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // optional string plaintextPass = 3;
  bool has_plaintextpass() const;
  private:
  bool _internal_has_plaintextpass() const;
  public:
  void clear_plaintextpass();
  const std::string& plaintextpass() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_plaintextpass(ArgT0&& arg0, ArgT... args);
  std::string* mutable_plaintextpass();
  PROTOBUF_MUST_USE_RESULT std::string* release_plaintextpass();
  void set_allocated_plaintextpass(std::string* plaintextpass);
  private:
  const std::string& _internal_plaintextpass() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_plaintextpass(const std::string& value);
  std::string* _internal_mutable_plaintextpass();
  public:

  // required int32 reqId = 1;
  bool has_reqid() const;
  private:
  bool _internal_has_reqid() const;
  public:
  void clear_reqid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqid() const;
  void set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqid() const;
  void _internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:authentication.AuthenticateWeb)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintextpass_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqid_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateWebSuccess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:authentication.AuthenticateWebSuccess) */ {
 public:
  inline AuthenticateWebSuccess() : AuthenticateWebSuccess(nullptr) {}
  ~AuthenticateWebSuccess() override;
  explicit constexpr AuthenticateWebSuccess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticateWebSuccess(const AuthenticateWebSuccess& from);
  AuthenticateWebSuccess(AuthenticateWebSuccess&& from) noexcept
    : AuthenticateWebSuccess() {
    *this = ::std::move(from);
  }

  inline AuthenticateWebSuccess& operator=(const AuthenticateWebSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateWebSuccess& operator=(AuthenticateWebSuccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticateWebSuccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticateWebSuccess* internal_default_instance() {
    return reinterpret_cast<const AuthenticateWebSuccess*>(
               &_AuthenticateWebSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AuthenticateWebSuccess& a, AuthenticateWebSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateWebSuccess* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateWebSuccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateWebSuccess* New() const final {
    return new AuthenticateWebSuccess();
  }

  AuthenticateWebSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateWebSuccess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticateWebSuccess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuthenticateWebSuccess& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateWebSuccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "authentication.AuthenticateWebSuccess";
  }
  protected:
  explicit AuthenticateWebSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreationDateFieldNumber = 3,
    kReqIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // required string creationDate = 3;
  bool has_creationdate() const;
  private:
  bool _internal_has_creationdate() const;
  public:
  void clear_creationdate();
  const std::string& creationdate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creationdate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creationdate();
  PROTOBUF_MUST_USE_RESULT std::string* release_creationdate();
  void set_allocated_creationdate(std::string* creationdate);
  private:
  const std::string& _internal_creationdate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creationdate(const std::string& value);
  std::string* _internal_mutable_creationdate();
  public:

  // required int32 reqId = 1;
  bool has_reqid() const;
  private:
  bool _internal_has_reqid() const;
  public:
  void clear_reqid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqid() const;
  void set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqid() const;
  void _internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 userId = 2;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:authentication.AuthenticateWebSuccess)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creationdate_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqid_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateWebFail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:authentication.AuthenticateWebFail) */ {
 public:
  inline AuthenticateWebFail() : AuthenticateWebFail(nullptr) {}
  ~AuthenticateWebFail() override;
  explicit constexpr AuthenticateWebFail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticateWebFail(const AuthenticateWebFail& from);
  AuthenticateWebFail(AuthenticateWebFail&& from) noexcept
    : AuthenticateWebFail() {
    *this = ::std::move(from);
  }

  inline AuthenticateWebFail& operator=(const AuthenticateWebFail& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateWebFail& operator=(AuthenticateWebFail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticateWebFail& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticateWebFail* internal_default_instance() {
    return reinterpret_cast<const AuthenticateWebFail*>(
               &_AuthenticateWebFail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AuthenticateWebFail& a, AuthenticateWebFail& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateWebFail* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateWebFail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateWebFail* New() const final {
    return new AuthenticateWebFail();
  }

  AuthenticateWebFail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateWebFail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticateWebFail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuthenticateWebFail& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateWebFail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "authentication.AuthenticateWebFail";
  }
  protected:
  explicit AuthenticateWebFail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AuthenticateWebFail_Reason Reason;
  static constexpr Reason INVALID_CREDENTIALS =
    AuthenticateWebFail_Reason_INVALID_CREDENTIALS;
  static constexpr Reason INTERNAL_SERVER_ERROR =
    AuthenticateWebFail_Reason_INTERNAL_SERVER_ERROR;
  static inline bool Reason_IsValid(int value) {
    return AuthenticateWebFail_Reason_IsValid(value);
  }
  static constexpr Reason Reason_MIN =
    AuthenticateWebFail_Reason_Reason_MIN;
  static constexpr Reason Reason_MAX =
    AuthenticateWebFail_Reason_Reason_MAX;
  static constexpr int Reason_ARRAYSIZE =
    AuthenticateWebFail_Reason_Reason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Reason_descriptor() {
    return AuthenticateWebFail_Reason_descriptor();
  }
  template<typename T>
  static inline const std::string& Reason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Reason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Reason_Name.");
    return AuthenticateWebFail_Reason_Name(enum_t_value);
  }
  static inline bool Reason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Reason* value) {
    return AuthenticateWebFail_Reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReqIdFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // required int32 reqId = 1;
  bool has_reqid() const;
  private:
  bool _internal_has_reqid() const;
  public:
  void clear_reqid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqid() const;
  void set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqid() const;
  void _internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .authentication.AuthenticateWebFail.Reason reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::authentication::AuthenticateWebFail_Reason reason() const;
  void set_reason(::authentication::AuthenticateWebFail_Reason value);
  private:
  ::authentication::AuthenticateWebFail_Reason _internal_reason() const;
  void _internal_set_reason(::authentication::AuthenticateWebFail_Reason value);
  public:

  // @@protoc_insertion_point(class_scope:authentication.AuthenticateWebFail)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqid_;
  int reason_;
  friend struct ::TableStruct_auth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateAccountWeb

// required int32 reqId = 1;
inline bool CreateAccountWeb::_internal_has_reqid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CreateAccountWeb::has_reqid() const {
  return _internal_has_reqid();
}
inline void CreateAccountWeb::clear_reqid() {
  reqid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateAccountWeb::_internal_reqid() const {
  return reqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateAccountWeb::reqid() const {
  // @@protoc_insertion_point(field_get:authentication.CreateAccountWeb.reqId)
  return _internal_reqid();
}
inline void CreateAccountWeb::_internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  reqid_ = value;
}
inline void CreateAccountWeb::set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:authentication.CreateAccountWeb.reqId)
}

// required string email = 2;
inline bool CreateAccountWeb::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateAccountWeb::has_email() const {
  return _internal_has_email();
}
inline void CreateAccountWeb::clear_email() {
  email_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreateAccountWeb::email() const {
  // @@protoc_insertion_point(field_get:authentication.CreateAccountWeb.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAccountWeb::set_email(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:authentication.CreateAccountWeb.email)
}
inline std::string* CreateAccountWeb::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:authentication.CreateAccountWeb.email)
  return _s;
}
inline const std::string& CreateAccountWeb::_internal_email() const {
  return email_.Get();
}
inline void CreateAccountWeb::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateAccountWeb::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000001u;
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateAccountWeb::release_email() {
  // @@protoc_insertion_point(field_release:authentication.CreateAccountWeb.email)
  if (!_internal_has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return email_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateAccountWeb::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:authentication.CreateAccountWeb.email)
}

// optional string plaintextPass = 3;
inline bool CreateAccountWeb::_internal_has_plaintextpass() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreateAccountWeb::has_plaintextpass() const {
  return _internal_has_plaintextpass();
}
inline void CreateAccountWeb::clear_plaintextpass() {
  plaintextpass_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CreateAccountWeb::plaintextpass() const {
  // @@protoc_insertion_point(field_get:authentication.CreateAccountWeb.plaintextPass)
  return _internal_plaintextpass();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAccountWeb::set_plaintextpass(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 plaintextpass_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:authentication.CreateAccountWeb.plaintextPass)
}
inline std::string* CreateAccountWeb::mutable_plaintextpass() {
  std::string* _s = _internal_mutable_plaintextpass();
  // @@protoc_insertion_point(field_mutable:authentication.CreateAccountWeb.plaintextPass)
  return _s;
}
inline const std::string& CreateAccountWeb::_internal_plaintextpass() const {
  return plaintextpass_.Get();
}
inline void CreateAccountWeb::_internal_set_plaintextpass(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpass_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateAccountWeb::_internal_mutable_plaintextpass() {
  _has_bits_[0] |= 0x00000002u;
  return plaintextpass_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateAccountWeb::release_plaintextpass() {
  // @@protoc_insertion_point(field_release:authentication.CreateAccountWeb.plaintextPass)
  if (!_internal_has_plaintextpass()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return plaintextpass_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateAccountWeb::set_allocated_plaintextpass(std::string* plaintextpass) {
  if (plaintextpass != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  plaintextpass_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plaintextpass,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:authentication.CreateAccountWeb.plaintextPass)
}

// -------------------------------------------------------------------

// CreateAccountWebSuccess

// required int32 reqId = 1;
inline bool CreateAccountWebSuccess::_internal_has_reqid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateAccountWebSuccess::has_reqid() const {
  return _internal_has_reqid();
}
inline void CreateAccountWebSuccess::clear_reqid() {
  reqid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateAccountWebSuccess::_internal_reqid() const {
  return reqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateAccountWebSuccess::reqid() const {
  // @@protoc_insertion_point(field_get:authentication.CreateAccountWebSuccess.reqId)
  return _internal_reqid();
}
inline void CreateAccountWebSuccess::_internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  reqid_ = value;
}
inline void CreateAccountWebSuccess::set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:authentication.CreateAccountWebSuccess.reqId)
}

// required int32 userId = 2;
inline bool CreateAccountWebSuccess::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreateAccountWebSuccess::has_userid() const {
  return _internal_has_userid();
}
inline void CreateAccountWebSuccess::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateAccountWebSuccess::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateAccountWebSuccess::userid() const {
  // @@protoc_insertion_point(field_get:authentication.CreateAccountWebSuccess.userId)
  return _internal_userid();
}
inline void CreateAccountWebSuccess::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  userid_ = value;
}
inline void CreateAccountWebSuccess::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:authentication.CreateAccountWebSuccess.userId)
}

// -------------------------------------------------------------------

// CreateAccountWebFail

// required int32 reqId = 1;
inline bool CreateAccountWebFail::_internal_has_reqid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateAccountWebFail::has_reqid() const {
  return _internal_has_reqid();
}
inline void CreateAccountWebFail::clear_reqid() {
  reqid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateAccountWebFail::_internal_reqid() const {
  return reqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateAccountWebFail::reqid() const {
  // @@protoc_insertion_point(field_get:authentication.CreateAccountWebFail.reqId)
  return _internal_reqid();
}
inline void CreateAccountWebFail::_internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  reqid_ = value;
}
inline void CreateAccountWebFail::set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:authentication.CreateAccountWebFail.reqId)
}

// required .authentication.CreateAccountWebFail.Reason reason = 2;
inline bool CreateAccountWebFail::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreateAccountWebFail::has_reason() const {
  return _internal_has_reason();
}
inline void CreateAccountWebFail::clear_reason() {
  reason_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::authentication::CreateAccountWebFail_Reason CreateAccountWebFail::_internal_reason() const {
  return static_cast< ::authentication::CreateAccountWebFail_Reason >(reason_);
}
inline ::authentication::CreateAccountWebFail_Reason CreateAccountWebFail::reason() const {
  // @@protoc_insertion_point(field_get:authentication.CreateAccountWebFail.reason)
  return _internal_reason();
}
inline void CreateAccountWebFail::_internal_set_reason(::authentication::CreateAccountWebFail_Reason value) {
  assert(::authentication::CreateAccountWebFail_Reason_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  reason_ = value;
}
inline void CreateAccountWebFail::set_reason(::authentication::CreateAccountWebFail_Reason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:authentication.CreateAccountWebFail.reason)
}

// -------------------------------------------------------------------

// AuthenticateWeb

// required int32 reqId = 1;
inline bool AuthenticateWeb::_internal_has_reqid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AuthenticateWeb::has_reqid() const {
  return _internal_has_reqid();
}
inline void AuthenticateWeb::clear_reqid() {
  reqid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthenticateWeb::_internal_reqid() const {
  return reqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthenticateWeb::reqid() const {
  // @@protoc_insertion_point(field_get:authentication.AuthenticateWeb.reqId)
  return _internal_reqid();
}
inline void AuthenticateWeb::_internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  reqid_ = value;
}
inline void AuthenticateWeb::set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:authentication.AuthenticateWeb.reqId)
}

// required string email = 2;
inline bool AuthenticateWeb::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthenticateWeb::has_email() const {
  return _internal_has_email();
}
inline void AuthenticateWeb::clear_email() {
  email_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthenticateWeb::email() const {
  // @@protoc_insertion_point(field_get:authentication.AuthenticateWeb.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticateWeb::set_email(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:authentication.AuthenticateWeb.email)
}
inline std::string* AuthenticateWeb::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:authentication.AuthenticateWeb.email)
  return _s;
}
inline const std::string& AuthenticateWeb::_internal_email() const {
  return email_.Get();
}
inline void AuthenticateWeb::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticateWeb::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000001u;
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticateWeb::release_email() {
  // @@protoc_insertion_point(field_release:authentication.AuthenticateWeb.email)
  if (!_internal_has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return email_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuthenticateWeb::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:authentication.AuthenticateWeb.email)
}

// optional string plaintextPass = 3;
inline bool AuthenticateWeb::_internal_has_plaintextpass() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthenticateWeb::has_plaintextpass() const {
  return _internal_has_plaintextpass();
}
inline void AuthenticateWeb::clear_plaintextpass() {
  plaintextpass_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AuthenticateWeb::plaintextpass() const {
  // @@protoc_insertion_point(field_get:authentication.AuthenticateWeb.plaintextPass)
  return _internal_plaintextpass();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticateWeb::set_plaintextpass(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 plaintextpass_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:authentication.AuthenticateWeb.plaintextPass)
}
inline std::string* AuthenticateWeb::mutable_plaintextpass() {
  std::string* _s = _internal_mutable_plaintextpass();
  // @@protoc_insertion_point(field_mutable:authentication.AuthenticateWeb.plaintextPass)
  return _s;
}
inline const std::string& AuthenticateWeb::_internal_plaintextpass() const {
  return plaintextpass_.Get();
}
inline void AuthenticateWeb::_internal_set_plaintextpass(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpass_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticateWeb::_internal_mutable_plaintextpass() {
  _has_bits_[0] |= 0x00000002u;
  return plaintextpass_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticateWeb::release_plaintextpass() {
  // @@protoc_insertion_point(field_release:authentication.AuthenticateWeb.plaintextPass)
  if (!_internal_has_plaintextpass()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return plaintextpass_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuthenticateWeb::set_allocated_plaintextpass(std::string* plaintextpass) {
  if (plaintextpass != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  plaintextpass_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plaintextpass,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:authentication.AuthenticateWeb.plaintextPass)
}

// -------------------------------------------------------------------

// AuthenticateWebSuccess

// required int32 reqId = 1;
inline bool AuthenticateWebSuccess::_internal_has_reqid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthenticateWebSuccess::has_reqid() const {
  return _internal_has_reqid();
}
inline void AuthenticateWebSuccess::clear_reqid() {
  reqid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthenticateWebSuccess::_internal_reqid() const {
  return reqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthenticateWebSuccess::reqid() const {
  // @@protoc_insertion_point(field_get:authentication.AuthenticateWebSuccess.reqId)
  return _internal_reqid();
}
inline void AuthenticateWebSuccess::_internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  reqid_ = value;
}
inline void AuthenticateWebSuccess::set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:authentication.AuthenticateWebSuccess.reqId)
}

// required int32 userId = 2;
inline bool AuthenticateWebSuccess::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AuthenticateWebSuccess::has_userid() const {
  return _internal_has_userid();
}
inline void AuthenticateWebSuccess::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthenticateWebSuccess::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthenticateWebSuccess::userid() const {
  // @@protoc_insertion_point(field_get:authentication.AuthenticateWebSuccess.userId)
  return _internal_userid();
}
inline void AuthenticateWebSuccess::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  userid_ = value;
}
inline void AuthenticateWebSuccess::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:authentication.AuthenticateWebSuccess.userId)
}

// required string creationDate = 3;
inline bool AuthenticateWebSuccess::_internal_has_creationdate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthenticateWebSuccess::has_creationdate() const {
  return _internal_has_creationdate();
}
inline void AuthenticateWebSuccess::clear_creationdate() {
  creationdate_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthenticateWebSuccess::creationdate() const {
  // @@protoc_insertion_point(field_get:authentication.AuthenticateWebSuccess.creationDate)
  return _internal_creationdate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticateWebSuccess::set_creationdate(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 creationdate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:authentication.AuthenticateWebSuccess.creationDate)
}
inline std::string* AuthenticateWebSuccess::mutable_creationdate() {
  std::string* _s = _internal_mutable_creationdate();
  // @@protoc_insertion_point(field_mutable:authentication.AuthenticateWebSuccess.creationDate)
  return _s;
}
inline const std::string& AuthenticateWebSuccess::_internal_creationdate() const {
  return creationdate_.Get();
}
inline void AuthenticateWebSuccess::_internal_set_creationdate(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  creationdate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticateWebSuccess::_internal_mutable_creationdate() {
  _has_bits_[0] |= 0x00000001u;
  return creationdate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticateWebSuccess::release_creationdate() {
  // @@protoc_insertion_point(field_release:authentication.AuthenticateWebSuccess.creationDate)
  if (!_internal_has_creationdate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return creationdate_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuthenticateWebSuccess::set_allocated_creationdate(std::string* creationdate) {
  if (creationdate != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  creationdate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creationdate,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:authentication.AuthenticateWebSuccess.creationDate)
}

// -------------------------------------------------------------------

// AuthenticateWebFail

// required int32 reqId = 1;
inline bool AuthenticateWebFail::_internal_has_reqid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthenticateWebFail::has_reqid() const {
  return _internal_has_reqid();
}
inline void AuthenticateWebFail::clear_reqid() {
  reqid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthenticateWebFail::_internal_reqid() const {
  return reqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthenticateWebFail::reqid() const {
  // @@protoc_insertion_point(field_get:authentication.AuthenticateWebFail.reqId)
  return _internal_reqid();
}
inline void AuthenticateWebFail::_internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  reqid_ = value;
}
inline void AuthenticateWebFail::set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:authentication.AuthenticateWebFail.reqId)
}

// required .authentication.AuthenticateWebFail.Reason reason = 2;
inline bool AuthenticateWebFail::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthenticateWebFail::has_reason() const {
  return _internal_has_reason();
}
inline void AuthenticateWebFail::clear_reason() {
  reason_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::authentication::AuthenticateWebFail_Reason AuthenticateWebFail::_internal_reason() const {
  return static_cast< ::authentication::AuthenticateWebFail_Reason >(reason_);
}
inline ::authentication::AuthenticateWebFail_Reason AuthenticateWebFail::reason() const {
  // @@protoc_insertion_point(field_get:authentication.AuthenticateWebFail.reason)
  return _internal_reason();
}
inline void AuthenticateWebFail::_internal_set_reason(::authentication::AuthenticateWebFail_Reason value) {
  assert(::authentication::AuthenticateWebFail_Reason_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  reason_ = value;
}
inline void AuthenticateWebFail::set_reason(::authentication::AuthenticateWebFail_Reason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:authentication.AuthenticateWebFail.reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace authentication

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::authentication::CreateAccountWebFail_Reason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::authentication::CreateAccountWebFail_Reason>() {
  return ::authentication::CreateAccountWebFail_Reason_descriptor();
}
template <> struct is_proto_enum< ::authentication::AuthenticateWebFail_Reason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::authentication::AuthenticateWebFail_Reason>() {
  return ::authentication::AuthenticateWebFail_Reason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_auth_2eproto
